# This workflow builds the ADFinder application, packages it into a .dmg,
# and then commits the DMG file back to the repository.
#
# Trigger:
# - Runs on a push to the 'master' branch ONLY if the commit message
#   includes the string '#build-binary'.
# - Can also be triggered manually from the GitHub Actions UI.

name: Build and Commit ADFinder DMG

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  # This single job handles all steps: dependency installation, building,
  # packaging the DMG, and committing the result.
  build-and-commit-dmg:
    # This condition ensures the job only runs if the commit message
    # contains '#build-binary'. This check is case-sensitive.
    if: contains(github.event.head_commit.message, '#build-binary')
    runs-on: macos-latest
    steps:
      # Step 1: Check out the repository's code.
      # We use a personal access token (PAT) with write permissions to be able
      # to push the commit back to the repository.
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for commit history
          token: ${{ secrets.GH_PAT }} # Use a PAT to allow pushing

      # Step 2: Install the 'create-dmg' utility.
      # This is crucial because the build script needs this command.
      - name: Install create-dmg dependency
        run: brew install create-dmg

      # Step 3: Select the required Xcode version.
      - name: Check and select Xcode version
        run: |
          echo "Default Xcode version:"
          xcodebuild -version
          echo "Available Xcode installations:"
          ls -d /Applications/Xcode*.app
          
          for version in 16.2 16.1 16.0 16; do
            if [ -d "/Applications/Xcode_${version}.app" ]; then
              echo "Found Xcode ${version}. Selecting it."
              sudo xcode-select -s "/Applications/Xcode_${version}.app/Contents/Developer"
              break
            fi
          done

          echo "Selected Xcode version:"
          xcodebuild -version

          if [ "$(xcodebuild -version | awk '/Xcode/ {print $2}' | cut -d. -f1)" -lt 16 ]; then
             echo "::error::Failed to select Xcode 16.x. The active version is still less than 16."
             exit 1
          fi

      # Step 4: Run the build and package script.
      - name: Build .app and Create .dmg
        id: build_step # Give this step an ID to access its outputs
        run: |
          set -euo pipefail
          cd Amiga/Tools/ADFinder/distribution
          
          # Make scripts executable
          chmod +x build_and_package.sh
          chmod +x gendmg.sh
          
          echo "▶ Starting build and package script..."
          # Execute the main build script
          ./build_and_package.sh --project ../ADFinder.xcodeproj --scheme "ADFinder - Release" --configuration Release

          # Find the created DMG and set it as an output variable
          DMG_FILE=$(find ../releases -name "ADFinder*.dmg" -print -quit)
          if [ -z "$DMG_FILE" ]; then
            echo "::error::Could not find the created DMG file."
            exit 1
          fi
          echo "DMG_FILE=$DMG_FILE" >> $GITHUB_OUTPUT
          
          echo "✅ Build and package script completed successfully."

      # Step 5: Commit the generated DMG file back to the repository.
      - name: Commit and Push DMG
        run: |
          set -euo pipefail
          # Configure Git with the Actions bot user
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Add the newly created DMG file to the staging area
          DMG_TO_COMMIT="${{ steps.build_step.outputs.DMG_FILE }}"
          echo "Adding $DMG_TO_COMMIT to Git."
          git add "$DMG_TO_COMMIT"
          
          # Commit the file if there are any changes
          if git diff-index --quiet HEAD; then
            echo "No changes to commit."
          else
            echo "Committing the new DMG..."
            # Extract the build number from the filename for the commit message
            BUILD_NUMBER=$(echo "$DMG_TO_COMMIT" | sed -n 's/.*_//; s/.dmg//p')
            git commit -m "CI: Add DMG for build ${BUILD_NUMBER}"
            
            # Push the commit to the master branch
            echo "Pushing changes to master..."
            git push origin master
          fi
