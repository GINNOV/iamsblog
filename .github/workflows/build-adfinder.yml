# This workflow builds the ADFinder application, packages it into a .app,
# and then creates a .dmg disk image.
#
# Trigger:
# - Runs on a push to the 'master' branch ONLY if the commit message
#   includes the string '#build-binary'.
# - Can also be triggered manually from the GitHub Actions UI.

name: Build ADFinder DMG

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  # This job builds the Xcode project and creates the .app bundle.
  # It then uploads the .app as an artifact for the next job.
  build-and-export:
    # This condition ensures the job only runs if the commit message
    # contains '#build-binary'. This check is case-sensitive.
    if: contains(github.event.head_commit.message, '#build-binary')
    runs-on: macos-latest
    steps:
      # Step 1: Check out the repository's code.
      # fetch-depth: 0 ensures we get the full history to access commit messages.
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Select the required Xcode version.
      # This loop ensures that a version of Xcode 16 is used for the build.
      - name: Check and select Xcode version
        run: |
          echo "Default Xcode version:"
          xcodebuild -version
          # Prefer Xcode 16 if available on the runner
          if [ -d "/Applications/Xcode_16.app/Contents/Developer" ]; then
            echo "Selecting Xcode 16..."
            sudo xcode-select -s "/Applications/Xcode_16.app/Contents/Developer"
          fi
          echo "Selected Xcode version:"
          xcodebuild -version

      # Step 3: Build the .app from the Xcode project.
      # The build_and_package.sh script handles the xcodebuild commands.
      # We removed output redirection to ensure build logs/errors are visible.
      - name: Build and export ADFinder
        run: |
          set -euo pipefail
          # Navigate to the directory containing the build script
          cd Amiga/Tools/ADFinder/distribution
          # Make the build script executable
          chmod +x build_and_package.sh
          echo "▶ Starting build and export script..."
          # Execute the script. All output will now go to the Actions log.
          ./build_and_package.sh --project ../ADFinder.xcodeproj --scheme "ADFinder - Release" --configuration Release
          echo "✅ Build and export completed successfully."
          echo "Verifying that ADFinder.app was created:"
          ls -ld build/ADFinder.app

      # Step 4: Upload the compiled .app as an artifact.
      # This allows the next job ('create-dmg') to download and use it.
      - name: Upload .app artifact
        uses: actions/upload-artifact@v4
        with:
          name: ADFinder-App
          path: Amiga/Tools/ADFinder/distribution/build/ADFinder.app
          retention-days: 7

  # This job takes the .app bundle from the previous job,
  # downloads it, and packages it into a distributable .dmg file.
  create-dmg:
    # This job depends on the successful completion of 'build-and-export'.
    needs: build-and-export
    runs-on: macos-latest
    steps:
      # Step 1: Check out the repository's code to get access to scripts and assets.
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Download the ADFinder.app artifact that was built in the previous job.
      # It will be placed in the specified 'path'.
      - name: Download ADFinder.app artifact
        uses: actions/download-artifact@v4
        with:
          name: ADFinder-App
          # The artifact will be downloaded to this directory, resulting in:
          # Amiga/Tools/ADFinder/distribution/build/ADFinder.app
          path: Amiga/Tools/ADFinder/distribution/build

      # Step 3: Install the 'create-dmg' utility using Homebrew.
      - name: Install create-dmg
        run: brew install create-dmg

      # Step 4: Create the final DMG file using the provided script and assets.
      - name: Create DMG
        run: |
          set -euo pipefail
          # Navigate to the directory containing the DMG generation script
          cd Amiga/Tools/ADFinder/distribution
          # Make the script executable
          chmod +x gendmg.sh
          echo "▶ Starting DMG creation..."
          # Verify that the .app bundle exists before trying to package it
          if [ ! -d "build/ADFinder.app" ]; then
            echo "::error::build/ADFinder.app not found after download!"
            echo "Directory contents:"
            ls -R
            exit 1
          fi
          # Ensure the target directory for the DMG exists
          mkdir -p ../releases
          # Run the script to create the DMG, logging all output
          ./gendmg.sh --app build/ADFinder.app --dmg ../releases/ADFinder.dmg \
            --readme dmg_assets/README.md \
            --background dmg_assets/dmg-background.png \
            --volicon dmg_assets/dmg-icon.icns
          echo "✅ DMG creation script finished."
          echo "Verifying that ADFinder.dmg was created:"
          ls -l ../releases/ADFinder.dmg

      # Step 5: Upload the final .dmg file as a workflow artifact.
      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: ADFinder-DMG
          path: Amiga/Tools/ADFinder/releases/ADFinder.dmg
          retention-days: 7