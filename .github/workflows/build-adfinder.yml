# This workflow builds the ADFinder application, packages it into a .dmg,
# and then commits the DMG file back to the repository.
#
# Trigger:
# - Runs on a push to the 'master' branch ONLY if the commit message
#   includes the string '#build-adfinder'.
# - Manual runs via 'workflow_dispatch' will be skipped by the job's 'if' condition.

name: Build and Commit ADFinder DMG

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  # This single job handles all steps: dependency installation, building,
  # packaging the DMG, and committing the result.
  build-and-commit-dmg:
    # This condition ensures the job only runs if the push commit message
    # contains the '#build-adfinder' trigger.
    if: contains(github.event.head_commit.message, '#build-adfinder')
    runs-on: macos-latest
    steps:
      # Step 1: Check out the repository's code.
      # We use a personal access token (PAT) with write permissions to be able
      # to push the commit back to the repository.
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for commit history
          token: ${{ secrets.GH_PAT }} # Use a PAT to allow pushing

      # Step 2: Install the 'create-dmg' utility.
      - name: Install create-dmg dependency
        run: brew install create-dmg

      # Step 3: Select the required Xcode version.
      - name: Check and select Xcode version
        run: |
          echo "Default Xcode version:"
          xcodebuild -version
          echo "Available Xcode installations:"
          ls -d /Applications/Xcode*.app
          
          for version in 16.2 16.1 16.0 16; do
            if [ -d "/Applications/Xcode_${version}.app" ]; then
              echo "Found Xcode ${version}. Selecting it."
              sudo xcode-select -s "/Applications/Xcode_${version}.app/Contents/Developer"
              break
            fi
          done

          echo "Selected Xcode version:"
          xcodebuild -version

          if [ "$(xcodebuild -version | awk '/Xcode/ {print $2}' | cut -d. -f1)" -lt 16 ]; then
             echo "::error::Failed to select Xcode 16.x. The active version is still less than 16."
             exit 1
          fi

      # Step 4: Run the build and package script.
      - name: Build .app and Create .dmg
        id: build_step # Give this step an ID to access its outputs
        run: |
          set -euo pipefail
          
          # Navigate into the script directory
          cd Amiga/Tools/ADFinder/distribution

          # Modify the output path in the build script to use the correct parent folder.
          echo "Updating DMG output path in build script..."
          sed -i '' 's|DMG_BASE_PATH="../releases/|DMG_BASE_PATH="../../releases/|g' build_and_package.sh
          
          # Make scripts executable
          chmod +x build_and_package.sh
          chmod +x gendmg.sh
          
          echo "▶ Starting build and package script..."
          # Execute the main build script
          ./build_and_package.sh --project ../ADFinder.xcodeproj --scheme "ADFinder - Release" --configuration Release
          
          # Go back to the repository root before finding the file
          cd ../../../..

          # Find the *newest* created DMG in the correct location relative to the repo root.
          # This prevents finding an old, pre-existing file.
          DMG_FILE=$(find Amiga/Tools/releases -name "ADFinder*.dmg" -type f -print0 | xargs -0 ls -t | head -n1)
          if [ -z "$DMG_FILE" ]; then
            echo "::error::Could not find the created DMG file from the repo root."
            exit 1
          fi
          echo "Found newest DMG at repo root relative path: $DMG_FILE"
          echo "DMG_FILE=$DMG_FILE" >> $GITHUB_OUTPUT
          
          echo "✅ Build and package script completed successfully."

      # Step 5: Commit the generated DMG file back to the repository.
      - name: Commit and Push DMG
        run: |
          set -euo pipefail
          # Configure Git with the Actions bot user
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Discard changes made to the build script by the sed command to keep the commit clean.
          git checkout -- Amiga/Tools/ADFinder/distribution/build_and_package.sh
          
          # Get the correct file path from the previous step's output
          DMG_TO_COMMIT="${{ steps.build_step.outputs.DMG_FILE }}"
          echo "Adding '$DMG_TO_COMMIT' to Git."
          git add "$DMG_TO_COMMIT"
          
          # Commit the file if there are any staged changes.
          if ! git diff --staged --quiet; then
            echo "Committing the new DMG..."
            # Extract the build number from the filename for the commit message
            BUILD_NUMBER=$(echo "$DMG_TO_COMMIT" | sed -n 's/.*_//; s/.dmg//p')
            git commit -m "CI: Add DMG for build ${BUILD_NUMBER}"
            
            # Push the commit to the master branch
            echo "Pushing changes to master..."
            git push origin master
          else
            echo "No new DMG file was created or added. Nothing to commit."
          fi
